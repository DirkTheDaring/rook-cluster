- name: Create a directory if it does not exist
  ansible.builtin.file:
    path: "{{ keycloak_credentials_dir }}"
    state: directory
    mode: '0700'

  # kubectl -n keycloak get secret keycloak -o custom-columns=name:metadata.name --no-headers 
- name: wait until secret appears
  ansible.builtin.command:
    argv:
    -  bash
    - -c
    - "while true; do [ -n \"$(kubectl -n {{ keycloak_namespace }} get secret keycloak -o custom-columns=name:metadata.name --no-headers)\" ] && break; sleep 5; done"
  register: keycloak_secret_result

- block:
  # kubectl --namespace keycloak get secret keycloak -o jsonpath="{.data.admin-password}" | base64 --decode
  - name: get current password and store it
    ansible.builtin.command:
      argv:
      - kubectl
      - --namespace
      - "{{ keycloak_namespace }}"
      - get
      - secret
      - keycloak
      - -o
      - custom-columns=password:data.admin-password
      - --no-headers
    register: keycloak_credential_result

  - name: extract password
    set_fact:
      keycloak_password: "{{ keycloak_credential_result.stdout | b64decode }}"
      keycloak_username: "user"
      keycloak_url:      "https://{{ keycloak_fqdn }}"

  - name: Create web.json
    template:
      src: "web.json.jinja2"
      dest: "{{ keycloak_credentials_dir }}/web.json"
  when: not keycloak_config_file.stat.exists

- block:
  # kubectl --namespace keycloak get secret keycloak -o jsonpath="{.data.management-password}" | base64 --decode
  - name: get current password and store it
    ansible.builtin.command:
      argv:
      - kubectl
      - --namespace
      - "{{ keycloak_namespace }}"
      - get
      - secret
      - keycloak
      - -o
      - custom-columns=password:data.management-password
      - --no-headers
    register: keycloak_credential_result

  - name: extract password
    set_fact:
      keycloak_password: "{{ keycloak_credential_result.stdout | b64decode }}"
      keycloak_username: "manager"
      keycloak_url:      "https://{{ keycloak_fqdn }}"

  - name: Create web.json
    template:
      src: "web.json.jinja2"
      dest: "{{ keycloak_credentials_dir }}/management.json"

  when: keycloak_management_config_file.stat.exists


- block:
  - name: wait until database secret appears
    ansible.builtin.command:
      argv:
      -  bash
      - -c
      - "while true; do [ -n \"$(kubectl -n {{ keycloak_namespace }} get secret keycloak-postgresql -o custom-columns=name:metadata.name --no-headers)\" ] && break; sleep 5; done"
    register: keycloak_postgresql_result

  # kubectl -n keycloak get secret keycloak-postgresql --no-headers -o custom-columns=password:data.password
  - name: get password for bn_keycloak user
    ansible.builtin.command:
      argv:
      - kubectl
      - --namespace
      - "{{ keycloak_namespace }}"
      - get
      - secret
      - keycloak-postgresql
      - --no-headers
      - -o
      - custom-columns=password:data.password
    register: keycloak_postgresql_password_result

  # kubectl -n keycloak get secret keycloak-postgresql --no-headers -o custom-columns=password:data.postgres-password
  - name: get password for postgres user
    ansible.builtin.command:
      argv:
      - kubectl
      - --namespace
      - "{{ keycloak_namespace }}"
      - get
      - secret
      - keycloak-postgresql
      - --no-headers
      - -o
      - custom-columns=password:data.postgres-password
    register: keycloak_postgresql_postgres_password_result

  - name: extract password
    set_fact:
      keycloak_postgresql_admin_password: "{{ keycloak_postgresql_postgres_password_result.stdout | b64decode }}"
      keycloak_postgresql_password:       "{{ keycloak_postgresql_password_result.stdout | b64decode }}"

  - name: Create config.json
    template:
      src: "config.json.jinja2"
      dest: "{{ keycloak_credentials_dir }}/config.json"

  when: not keycloak_postgresql_config_file.stat.exists

