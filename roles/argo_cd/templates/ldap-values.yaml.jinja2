global:
  domain: {{ argocd_fqdn }}
configs:
  cm:
    dex.config: |-
      connectors:
{% if argocd_ldap_profile == "ldap" %}
      - type: ldap
        name: "SSO"
        id: ad
        config:
          host: {{ argocd_ldap_server }}:{{argocd_ldap_port }}
          insecureNoSSL: false
          insecureSkipVerify: {{ argocd_ldap_insecure_tls }}
          # ldap bindDN in argocd-secret
          bindDN: "$dex.ldap.bindDN"
          # ldap bind password in argocd-secret
          bindPW: "$dex.ldap.bindPW"
          usernamePrompt: Username
          userSearch:
            baseDN: "{{ argocd_ldap_user_basedn }}"
            filter: "(objectClass=user)"
            username: sAMAccountName
            idAttr: distinguishedName
            emailAttr: mail
            nameAttr: displayName
            preferredUsernameAttr: cn
          groupSearch:
            baseDN: "{{ argocd_ldap_group_basedn }}"
            filter: "(objectClass=group)"
            userAttr: distinguishedName
            groupAttr: member
            nameAttr: name
{% elif argocd_ldap_profile == "activedirectory" %}
      - type: ldap
        name: "SSO"
        id: ad
        config:
          host: {{ argocd_ldap_server }}:{{argocd_ldap_port }}
          insecureNoSSL:  {{ argocd_ldap_insecure_no_ssl }}
          insecureSkipVerify: {{ argocd_ldap_insecure_tls }}
          # ldap bindDN in argocd-secret
          bindDN: "$dex.ldap.bindDN"
          # ldap bind password in argocd-secret
          bindPW: "$dex.ldap.bindPW"
          usernamePrompt: Email
          userSearch:
            baseDN: "{{ argocd_ldap_user_basedn }}"
            # filter + username are used for selection of user in LDAP
            filter: "(objectClass=person)"
            username: userPrincipalName
            # These are the attributes taken from LDAP
            idAttr: DN
            emailAttr: userPrincipalName
            nameAttr: sAMAccountName
            #nameAttr: userPrincipalName
            preferredUsernameAttr: cn
          groupSearch:
            baseDN: "{{ argocd_ldap_group_basedn }}"
            filter: "(objectClass=group)"
            userMatchers:
            - userAttr: DN
              groupAttr: "member:1.2.840.113556.1.4.1941:"
            nameAttr: cn
{% endif %}
      staticClients:
{% for item in argocd_sso_list %}
      - name: {{ item.name }}
        id:   argocd-repo-creds-{{ item.id }}
        redirectURIs:
{% for url in item.redirectURIs %}
        - {{ url }}
{% endfor %}
        secretEnv: {{ item.secretEnv }}
{% endfor %}
  params:
    dexserver.disable.tls: true
  rbac:
    policy.default: 'role:none'
    policy.csv: |
      p, role:none, *, *, */*, deny
{% for item in argocd_policy_users %}
      g, {{ item.name }}, {{ item.role }}
{% endfor %}
{% for item in argocd_policy_groups %}
      g, {{ item.name }}, {{ item.role }}
{% endfor %}
    scopes: "[groups,email]"

  credentialTemplates:
{% for item in argocd_sso_list %}
    {{ item.id }}:
      client-id:     argocd-repo-creds-{{ item.id }}
      client-secret: {{ item.uid }}
{% endfor %}

  secret:
{% if argocd_gitlab_secret is defined and argocd_gitlab_secret != "" %}
    # Shared secret for authenticating GitLab webhook events
    gitlabSecret: "{{ argocd_gitlab_secret }}"
{% endif %}
{% if argocd_github_secret is defined and argocd_github_secret != "" %}
    # Shared secret for authenticating Github webhook events
    githubbSecret: "{{ argocd_github_secret }}"
{% endif %}
    extra:
      dex.ldap.bindDN: "{{ argocd_ldap_bind_dn }}"
      dex.ldap.bindPW: "{{ argocd_ldap_bind_password }}"

dex:
  env: 
{% for item in argocd_sso_list %}
  - name: {{ item.secretEnv }}
    valueFrom:
      secretKeyRef:
        name: argocd-repo-creds-{{ item.id }}
        key:  client-secret
{% endfor %}

server:
  extraArgs:
    - --insecure
  service:
    servicePortHttp:  8080 # quirk because k8s 1.29.* complains otherwise about duplicate ports
    servicePortHttps: 80 # 443
  ingress:
    enabled: true
    annotations:
      traefik.ingress.kubernetes.io/router.entrypoints: websecure #, jnlp needs an IngressRouteTCP object!
      traefik.ingress.kubernetes.io/router.tls: "true"
    ingressClassName: "traefik"
