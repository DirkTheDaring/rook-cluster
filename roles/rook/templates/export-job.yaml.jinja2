apiVersion: batch/v1
kind: Job
metadata:
  name: export-vars-for-external
  namespace: {{ rook_namespace }} # namespace:cluster
  labels:
    app: export-vars-for-external
spec:
  template:
    spec:
      initContainers:
        - name: config-init
          image: rook/ceph:{{ helm_chart_version }}
          command: ["/usr/local/bin/toolbox.sh"]
          args: ["--skip-watch"]
          imagePullPolicy: IfNotPresent
          env:
            - name: ROOK_CEPH_USERNAME
              valueFrom:
                secretKeyRef:
                  name: rook-ceph-mon
                  key: ceph-username
            - name: ROOK_CEPH_SECRET
              valueFrom:
                secretKeyRef:
                  name: rook-ceph-mon
                  key: ceph-secret
          volumeMounts:
            - mountPath: /etc/ceph
              name: ceph-config
            - name: mon-endpoint-volume
              mountPath: /etc/rook
      containers:
        - name: script
          image: rook/ceph:{{ helm_chart_version }}
          volumeMounts:
            - mountPath: /etc/ceph
              name: ceph-config
              readOnly: true
          command:
            - "bash"
            - "-c"
            - |
              echo Fetch ROOK_EXTERNAL_FSID
              while true; do ROOK_EXTERNAL_FSID=$(ceph fsid) && break; sleep 10; done
              echo Found: $ROOK_EXTERNAL_FSID
              echo Fetch ROOK_EXTERNAL_ADMIN_SECRET
              while true; do ROOK_EXTERNAL_ADMIN_SECRET=$(ceph auth get-key client.admin) && break; sleep 10; done
              echo Found: $ROOK_EXTERNAL_ADMIN_SECRET
              while true; do RGW_ADMIN_OPS_USERS=$(radosgw-admin --rgw-default-data-log-backing=omap user list) && break; sleep 10; done
              echo Found: $RGW_ADMIN_OPS_USERS
              HAS_RGW_ADMIN_OPS_USER=$(echo $RGW_ADMIN_OPS_USERS|jq 'contains(["rgw-admin-ops-user"])')
              echo Found: $HAS_RGW_ADMIN_OPS_USER
              if [ "$HAS_RGW_ADMIN_OPS_USER" == "false" ]; then
                bash /etc/rook-external/create-external-cluster-resources.sh
              else
                echo "*** rgw-admin-ops-user exists. setup external cluster resources skipped"
              fi
    
              FLAG=0
              while true; do
                if [ $FLAG == 1 ]; then sleep 10 else FLAG=1; fi
                echo Fetch output from radosgw-admin
                RADOSGW_ADMIN_RESULT=$(radosgw-admin --rgw-default-data-log-backing=omap user info --uid rgw-admin-ops-user) || continue
                echo Fetch RGW_ADMIN_OPS_USER_ACCESS_KEY
                RGW_ADMIN_OPS_USER_ACCESS_KEY=$(echo "$RADOSGW_ADMIN_RESULT"|jq --raw-output '.keys[0].access_key') || continue
                echo Fetch RGW_ADMIN_OPS_USER_SECRET_KEY
                RGW_ADMIN_OPS_USER_SECRET_KEY=$(echo "$RADOSGW_ADMIN_RESULT"|jq --raw-output '.keys[0].secret_key') || continue
                break
              done
              FLAG=0
              while true; do
                if [ $FLAG == 1 ]; then sleep 10 else FLAG=1; fi
                echo Fetch output from ceph mon dump
                CEPH_MON_DUMP=$(ceph mon dump -f json 2>/dev/null) || continue
                echo Fetch ROOK_EXTERNAL_CEPH_MON_DATA
                ROOK_EXTERNAL_CEPH_MON_DATA=$(echo $CEPH_MON_DUMP|jq -r '.mons[].public_addrs.addrvec[]|select(.type=="v1").addr' |awk -v ORS=, '{print "x"NR"="$1}' | sed 's/,$//' |sed 's/x1=/a=/' | sed 's/x2=/b=/' | sed 's/x3=/c=/'  ) || continue
                break
              done
{% if rook_ceph_quirk %}
              # FIX for error 
              MON_MAX_PG_PER_OSD=$(ceph config get mon mon_max_pg_per_osd)
              echo "- mon_max_pg_per_osd: $MON_MAX_PG_PER_OSD"
              ceph config set mon mon_max_pg_per_osd {{ rook_ceph_mon_max_pg_per_osd | default('568') }}
              MON_MAX_PG_PER_OSD=$(ceph config get mon mon_max_pg_per_osd)
              echo "+ mon_max_pg_per_osd: $MON_MAX_PG_PER_OSD"
{% endif %}              # END FIX
{% if rook_ceph_server %}
              # Enable backend rook 
              # Source: https://docs.ceph.com/en/latest/mgr/orchestrator/#configuring-the-orchestrator-cli
              ceph mgr module enable rook
              ceph orch set backend rook
{% endif %}              # END Enable
              echo "--- json output starts after this line"
{% if true %}
              cat<<EOF
              {
                "rook_external_fsid": "$ROOK_EXTERNAL_FSID",
                "rook_external_admin_secret": "$ROOK_EXTERNAL_ADMIN_SECRET",
                "rgw_admin_ops_user_access_key": "$RGW_ADMIN_OPS_USER_ACCESS_KEY",
                "rgw_admin_ops_user_secret_key": "$RGW_ADMIN_OPS_USER_SECRET_KEY",
                "rook_external_ceph_mon_data": "$ROOK_EXTERNAL_CEPH_MON_DATA"
              }
              EOF
{% else %}
              cat<<EOF
              export ROOK_EXTERNAL_FSID=$ROOK_EXTERNAL_FSID
              export ROOK_EXTERNAL_ADMIN_SECRET=$ROOK_EXTERNAL_ADMIN_SECRET
              export RGW_ADMIN_OPS_USER_ACCESS_KEY=$RGW_ADMIN_OPS_USER_ACCESS_KEY
              export RGW_ADMIN_OPS_USER_SECRET_KEY=$RGW_ADMIN_OPS_USER_SECRET_KEY
              export ROOK_EXTERNAL_CEPH_MON_DATA=$ROOK_EXTERNAL_CEPH_MON_DATA
              EOF
{% endif %}
      volumes:
        - name: mon-endpoint-volume
          configMap:
            name: rook-ceph-mon-endpoints
            items:
              - key: data
                path: mon-endpoints
        - name: ceph-config
          emptyDir: {}
      restartPolicy: Never
